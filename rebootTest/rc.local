#!/bin/bash
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

#####>>>>
function StartLogo () {
printf "\033[1;34m  ______ ______   _______ ____  _   _ _   _         _____  _____ _____\033[0m\n" 
printf "\033[1;34m |  ____/ __ \ \ / / ____/ __ \| \ | | \ | |       / ____|/ ____|_   _|\033[0m\n"
printf "\033[1;34m | |__ | |  | \ V / |   | |  | |  \| |  \| |______| |    | (___   | |\033[0m\n"  
printf "\033[1;34m |  __|| |  | |> <| |   | |  | | | | | | | |______| |     \___ \  | |\033[0m\n"  
printf "\033[1;34m | |   | |__| / . \ |___| |__| | |\  | |\  |      | |____ ____) |_| |_\033[0m\n" 
printf "\033[1;34m |_|    \____/_/ \_\_____\____/|_| \_|_| \_|       \_____|_____/|_____|\033[0m\n"  
}

function ConfigcheckLogo (){
printf "\033[1;34m  _____             __ _            _               _\033[0m\n"    
printf "\033[1;34m / ____|           / _(_)          | |             | |\033[0m\n"   
printf "\033[1;34m| |     ___  _ __ | |_ _  __ _  ___| |__   ___  ___| |  _\033[0m\n"
printf "\033[1;34m| |    / _ \| '_ \|  _| |/ _\ |/ __| '_ \ / _ \/ __| |/ /\033[0m\n"
printf "\033[1;34m| |___| (_) | | | | | | | (_| | (__| | | |  __/ (__|   <\033[0m\n" 
printf "\033[1;34m \_____\___/|_| |_|_| |_|\__/ |\___|_| |_|\___|\___|_|\ \\\ \033[0m\n"
printf "\033[1;34m                          __/ |\033[0m\n"                          
printf "\033[1;34m                         |___/\033[0m\n"  
}

function SoftrebootLogo () {
printf "\033[5;34m   _____        __ _          _____      _                 _\033[0m\n"   
printf "\033[5;34m  / ____|      / _| |        |  __ \    | |               | |\033[0m\n"  
printf "\033[5;34m | (___   ___ | |_| |_ ______| |__) |___| |__   ___   ___ | |_\033[0m\n" 
printf "\033[5;34m  \___ \ / _ \|  _| __|______|  _  // _ \ '_ \ / _ \ / _ \| __|\033[0m\n"
printf "\033[5;34m  ____) | (_) | | | |_       | | \ \  __/ |_) | (_) | (_) | |_\033[0m\n" 
printf "\033[5;34m |_____/ \___/|_|  \__|      |_|  \_\___|_.__/ \___/ \___/ \__|\033[0m\n"
printf "\n"
}

function RebootLogo (){
printf "\033[1;33m _____      _                 _     _ _ \033[0m\n"
printf "\033[1;33m|  __ \    | |               | |   | | |\033[0m\n"
printf "\033[1;33m| |__) |___| |__   ___   ___ | |_  | | |\033[0m\n"
printf "\033[1;33m|  _  // _ \ '_ \ / _ \ / _ \| __| | | |\033[0m\n"
printf "\033[1;33m| | \ \  __/ |_) | (_) | (_) | |_  |_|_|\033[0m\n"
printf "\033[1;33m|_|  \_\___|_.__/ \___/ \___/ \__| (_|_)\033[0m\n"
} 

function ExitLogo () {
printf "\033[40;35m  ______     ________ _ \033[0m\n"
printf "\033[40;35m |  _ \ \   / /  ____| |\033[0m\n"
printf "\033[40;35m | |_) \ \_/ /| |__  | |\033[0m\n"
printf "\033[40;35m |  _ < \   / |  __| | |\033[0m\n"
printf "\033[40;35m | |_) | | |  | |____|_|\033[0m\n"
printf "\033[40;35m |____/  |_|  |______(_)\033[0m\n"
}

function FinishLogo () {
printf "\033[1;34m _______        _     ______ _       _     _       _ _ _ \033[0m\n"
printf "\033[1;34m|__   __|      | |   |  ____(_)     (_)   | |     | | | |\033[0m\n"
printf "\033[1;34m   | | ___  ___| |_  | |__   _ _ __  _ ___| |__   | | | |\033[0m\n"
printf "\033[1;34m   | |/ _ \/ __| __| |  __| | | '_ \| / __| '_ \  | | | |\033[0m\n"
printf "\033[1;34m   | |  __/\__ \ |_  | |    | | | | | \__ \ | | | |_|_|_|\033[0m\n"
printf "\033[1;34m   |_|\___||___/\__| |_|    |_|_| |_|_|___/_| |_| (_|_|_)\033[0m\n"
}

function TestStopLogo () {
printf "\033[5;31m _______ ______  _____ _______    _____ _______ ____  _____    _ _ \033[0m\n"
printf "\033[5;31m|__   __|  ____|/ ____|__   __|  / ____|__   __/ __ \|  __ \  | | |\033[0m\n"
printf "\033[5;31m   | |  | |__  | (___    | |    | (___    | | | |  | | |__) | | | |\033[0m\n"
printf "\033[5;31m   | |  |  __|  \___ \   | |     \___ \   | | | |  | |  ___/  | | |\033[0m\n"
printf "\033[5;31m   | |  | |____ ____) |  | |     ____) |  | | | |__| | |      |_|_|\033[0m\n"
printf "\033[5;31m   |_|  |______|_____/   |_|    |_____/   |_|  \____/|_|      (_|_)\033[0m\n"
}
#####<<<<

##>>Wait OVSS Service
clear
sleep 80
##<<Wait OVSS Service
clear
sync
ifconfig usb0 10.0.1.70 netmask 255.255.255.0
clear
printf "\033[1;33m Wait for 30 Sec, If you want to stop rc.local, please Use BMC set the MUX to off !! \033[0m\n"
echo "BMC Command: ssh root@10.0.1.70 'echo off > /rclocal_mux.txt' "
sleep 40
sync
rclocal_mux=`cat /rclocal_mux.txt`
if [ $rclocal_mux  = off ]; then
	echo on > /rclocal_mux.txt
	sync
	echo "Stop rc.local"
	TestStopLogo
	exit 0
else
	echo ------------------------------------------ >>  /home/summary.log
	echo "Soft Reboot" >> /home/summary.log
	date "+%Y-%m-%d %H:%M:%S" >> /home/summary.log;

	if [ ! -f /home/Reboot_count.txt ]; then
		echo 0 > /home/Reboot_count.txt
	fi

	cd /
	chmod 777 reboot_configcheck.sh
	##>>Show Logo
	clear
	clear
	sleep 1	 
	StartLogo
	sleep 1
	ConfigcheckLogo
	sleep 1										 
	printf "\033[1;33m Comparing.. !!! \033[0m\n"
	printf "\n"
	printf "\033[1;33m Please wait for Configcheck (About 50 Sec)...... \033[0m\n"
	printf "\n"
	##<<Show Logo 
	sleep 1

	now_1="$(date +'%c')"
	##Wati fot 50sec>>>
	./reboot_configcheck.sh > Config.txt & PID=$! 
	printf "\033[1;33m Start:$now_1 \033[0m\n"
	printf "\033[1;33m-----------------------------------------------------------------------------------------\033[0m\n"
	# While configcheck is running...
		while kill -0 $PID 2> /dev/null; do 
			printf "\033[1;33m Please wait for Configchecking...... \033[0m\n"
			sleep 3
		done
	printf "\n"	
	printf "\033[1;33m-----------------------------------------------------------------------------------------\033[0m\n"	
	now_2="$(date +'%c')"
	printf "\033[1;33m  End: $now_2 \033[0m\n"
	##Wati fot 50sec<<<
								
	sync

	chmod 777 Config.txt
	chmod 777 Configcheck_Baseline.txt

	sync

	##>>Configcheck file define
	file1=Config.txt
	file2=Configcheck_Baseline.txt
	##<<Configcheck file define

	##>>Show Logo
	sleep 1
	SoftrebootLogo
	printf "\n"
	./Total_TestCountProgressBar.sh
	##<<Show Logo

	COUNTER=0

	COUNTER=`cat /home/Reboot_count.txt`

	if [ $COUNTER -lt 3 ]; then
		if diff "$file1" "$file2" -b -B >> /home/summary.log; then
			sync
			echo "Configcheck files is match" > config_match.txt						
			echo  Compare Pass >> /home/summary.log
			printf "\033[1;32m Configcheck files is match !!! \033[0m\n"
			printf "\n"			  
		else
			sync
			echo "Configcheck files are different!!" > config_diff.txt			
			echo Compare Fail >> /home/summary.log
			printf "\033[1;31m Configcheck Failed !!! \033[0m\n"
			printf "\n"			  
		fi
		COUNTER=$(($COUNTER+1))
		sleep 2	
		printf "\033[1;32m The number of times the test is: $COUNTER \033[0m\n"
		echo "The number of times the test is : $COUNTER" > /home/Reboot_count_status.txt
		##20221226>>
		printf "\n"
		Compare_Fail=`cat /home/summary.log | grep "Compare Fail" | wc -l`
		printf "\033[1;31m The number of system configuration mismatches: $Compare_Fail \033[0m\n"
		##20221226<<
		printf "\n"		 
		echo $COUNTER > /home/Reboot_count.txt
		echo count: >> /home/summary.log
		echo $COUNTER >> /home/summary.log
		echo ------------------------------------------ >> /home/summary.log
		mkdir  /home/$COUNTER
		cp /Config.txt   /home/$COUNTER/$COUNTER.txt
		date "+%Y-%m-%d %H:%M:%S" >> /home/$COUNTER/$COUNTER.txt
		dmesg -T  >  /home/$COUNTER/dmesg.txt
		lspci > /home/$COUNTER/lspci.txt
		lspci -vvv | egrep DevSta > /home/$COUNTER/lspci_Devsta.txt
		lspci -vvv > /home/$COUNTER/lspci_vvv.txt
		lspci -xxxx > /home/$COUNTER/lspci_xxxx.txt
		free > /home/$COUNTER/free.txt
		gsys event records list > /home/$COUNTER/gsys_event.txt
		ipmitool sel list > /home/$COUNTER/ipmitool_sel.txt
		SEL_awk=`cat /home/$COUNTER/ipmitool_sel.txt | awk '{print$13}'`
		for SEL_awk_loop in $SEL_awk; do
			perl ampereone_bmc_sel.plx raw_pldm $SEL_awk_loop >> /home/$COUNTER/SEL_OEM.log
		done
		##cp /var/log/messages /home/$COUNTER/
		sync
		##>>Show Logo
		sleep 2	
		RebootLogo
		printf "\n"
		sleep 2
		ExitLogo
		##<<Show Logo	
		shutdown -r now
	else
		FinishLogo
		printf "\n"	
		printf "\033[1;32m Soft Reboot test finish !!! \033[0m\n"
		printf "\n"		
		echo "Soft Reboot test finish !!!" > /home/Reboot_finish.txt
		journalctl > /home/journalctl.log
		ipmitool sel list > /home/SEL.log
		gsys event records list > /home/gsysevent.log
		journalctl --list-boots > /home/journalctl_list_boots.log
		##20221226>>
		sync
		SEL_awk=`cat /home/SEL.log | grep "OEM record" | awk '{print$13}'`
		for SEL_awk_loop in $SEL_awk; do
			perl ampereone_bmc_sel.plx raw_pldm $SEL_awk_loop >> /home/SEL_OEM.log
		done
		
		##20221226<<
		##20220104Add>>
		cd /
		chmod 777 Check_dmesg.sh
		sleep 3
		./Check_dmesg.sh
		##20220104Add<<
		sync
	fi
fi

exit 0
